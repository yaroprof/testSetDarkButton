{"ast":null,"code":"var _jsxFileName = \"C:\\\\workPlace\\\\01-Skills\\\\w-From tutorials\\\\forPortfolio\\\\freelance-portfolio-react\\\\src\\\\components\\\\btnDarkMode\\\\BtnDarkMode.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useLocalStorage } from './../../utils/useLocalStorage';\nimport detectDarkMode from '../../utils/detectDarkMode';\nimport sun from './sun.svg';\nimport moon from './moon.svg';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BtnDarkMode = () => {\n  _s();\n  // useLocalStorage отримує актуальні чи дефолтні значення зі сховища; актуальні - darkMode (key у сховищі), якщо його немає - встан. дефолтне. При отриманні даних зі сховища BtnDarkMode запускає detectDarkMode та отримує актуальні дані\n  const [darkMode, setDarkMode] = useLocalStorage('darkMode', detectDarkMode());\n  // за результатми darkMode body отримує той, чи інший клас та стилі\n  useEffect(() => {\n    if (darkMode === 'dark') {\n      document.body.classList.add('dark');\n    } else {\n      document.body.classList.remove('dark');\n    }\n  }, [darkMode]);\n  useEffect(() => {\n    // matchMedia- аналізує, яку тему встановив клієнт , якщо темну, тоді привласн. true, світла- false/ відповідно спрацьовує - setDarkMode\n    window.matchMedia('(prefers-color-scheme: dark)')\n    // Метод addEventListener() прослуховує зміни в об'єкті matchMedia('(prefers-color-scheme: dark)'), що визначає, чи вибраний на пристрої користувачем темний чи світлий режим.\n\n    // Коли стан цього об'єкта змінюється, відбувається подія change, і передається об'єкт event, що містить інформацію про зміни.\n    // В залежності від того, який режим було обрано, виконується один з двох варіантів:\n    // якщо змінюється на темну тему, змінна newColorScheme приймає значення 'dark'\n    // якщо змінюється на світлу тему, змінна newColorScheme приймає значення 'light'\n    // Отже, змінна newColorScheme визначає, який режим теми було обрано, і передається в функцію setDarkMode() для оновлення налаштувань теми в додатку.\n    .addEventListener('change', event => {\n      const newColorScheme = event.matches ? 'dark' : 'light';\n      setDarkMode(newColorScheme);\n    });\n  }, [setDarkMode]);\n\n  // toggleDarkMode запускає ф-ю setDarkMode , Яка змінює показник на протилежний\n  const toggleDarkMode = () => {\n    setDarkMode(currentValue => {\n      return currentValue === 'light' ? 'dark' : 'light';\n    });\n  };\n  const btnNormal = 'dark-mode-btn';\n  const btnActive = 'dark-mode-btn dark-mode-btn--active';\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: darkMode === 'dark' ? btnActive : btnNormal,\n    onClick: toggleDarkMode,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: sun,\n      alt: \"Light mode\",\n      className: \"dark-mode-btn__icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: moon,\n      alt: \"Dark mode\",\n      className: \"dark-mode-btn__icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(BtnDarkMode, \"k6qhLZlRVRGTVCbaKvqV061xlI8=\", false, function () {\n  return [useLocalStorage];\n});\n_c = BtnDarkMode;\nexport default BtnDarkMode;\nvar _c;\n$RefreshReg$(_c, \"BtnDarkMode\");","map":{"version":3,"names":["useEffect","useLocalStorage","detectDarkMode","sun","moon","BtnDarkMode","darkMode","setDarkMode","document","body","classList","add","remove","window","matchMedia","addEventListener","event","newColorScheme","matches","toggleDarkMode","currentValue","btnNormal","btnActive"],"sources":["C:/workPlace/01-Skills/w-From tutorials/forPortfolio/freelance-portfolio-react/src/components/btnDarkMode/BtnDarkMode.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useLocalStorage } from './../../utils/useLocalStorage';\nimport detectDarkMode from '../../utils/detectDarkMode';\n\nimport sun from './sun.svg';\nimport moon from './moon.svg';\nimport './style.css';\n\nconst BtnDarkMode = () => {\n  // useLocalStorage отримує актуальні чи дефолтні значення зі сховища; актуальні - darkMode (key у сховищі), якщо його немає - встан. дефолтне. При отриманні даних зі сховища BtnDarkMode запускає detectDarkMode та отримує актуальні дані\n  const [darkMode, setDarkMode] = useLocalStorage('darkMode', detectDarkMode());\n  // за результатми darkMode body отримує той, чи інший клас та стилі\n  useEffect(() => {\n    if (darkMode === 'dark') {\n      document.body.classList.add('dark');\n    } else {\n      document.body.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  useEffect(() => {\n    // matchMedia- аналізує, яку тему встановив клієнт , якщо темну, тоді привласн. true, світла- false/ відповідно спрацьовує - setDarkMode\n    window\n      .matchMedia('(prefers-color-scheme: dark)')\n      // Метод addEventListener() прослуховує зміни в об'єкті matchMedia('(prefers-color-scheme: dark)'), що визначає, чи вибраний на пристрої користувачем темний чи світлий режим.\n\n      // Коли стан цього об'єкта змінюється, відбувається подія change, і передається об'єкт event, що містить інформацію про зміни.\n      // В залежності від того, який режим було обрано, виконується один з двох варіантів:\n      // якщо змінюється на темну тему, змінна newColorScheme приймає значення 'dark'\n      // якщо змінюється на світлу тему, змінна newColorScheme приймає значення 'light'\n      // Отже, змінна newColorScheme визначає, який режим теми було обрано, і передається в функцію setDarkMode() для оновлення налаштувань теми в додатку.\n      .addEventListener('change', (event) => {\n        const newColorScheme = event.matches ? 'dark' : 'light';\n        setDarkMode(newColorScheme);\n      });\n  }, [setDarkMode]);\n\n  // toggleDarkMode запускає ф-ю setDarkMode , Яка змінює показник на протилежний\n  const toggleDarkMode = () => {\n    setDarkMode((currentValue) => {\n      return currentValue === 'light' ? 'dark' : 'light';\n    });\n  };\n\n  const btnNormal = 'dark-mode-btn';\n  const btnActive = 'dark-mode-btn dark-mode-btn--active';\n\n  return (\n    <button className={darkMode === 'dark' ? btnActive : btnNormal} onClick={toggleDarkMode}>\n      <img src={sun} alt=\"Light mode\" className=\"dark-mode-btn__icon\" />\n      <img src={moon} alt=\"Dark mode\" className=\"dark-mode-btn__icon\" />\n    </button>\n  );\n};\n\nexport default BtnDarkMode;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,OAAOC,cAAc,MAAM,4BAA4B;AAEvD,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,aAAa;AAAC;AAErB,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,eAAe,CAAC,UAAU,EAAEC,cAAc,EAAE,CAAC;EAC7E;EACAF,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,KAAK,MAAM,EAAE;MACvBE,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IACrC,CAAC,MAAM;MACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACxC;EACF,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEdN,SAAS,CAAC,MAAM;IACd;IACAa,MAAM,CACHC,UAAU,CAAC,8BAA8B;IAC1C;;IAEA;IACA;IACA;IACA;IACA;IAAA,CACCC,gBAAgB,CAAC,QAAQ,EAAGC,KAAK,IAAK;MACrC,MAAMC,cAAc,GAAGD,KAAK,CAACE,OAAO,GAAG,MAAM,GAAG,OAAO;MACvDX,WAAW,CAACU,cAAc,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC,EAAE,CAACV,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMY,cAAc,GAAG,MAAM;IAC3BZ,WAAW,CAAEa,YAAY,IAAK;MAC5B,OAAOA,YAAY,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACpD,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,SAAS,GAAG,eAAe;EACjC,MAAMC,SAAS,GAAG,qCAAqC;EAEvD,oBACE;IAAQ,SAAS,EAAEhB,QAAQ,KAAK,MAAM,GAAGgB,SAAS,GAAGD,SAAU;IAAC,OAAO,EAAEF,cAAe;IAAA,wBACtF;MAAK,GAAG,EAAEhB,GAAI;MAAC,GAAG,EAAC,YAAY;MAAC,SAAS,EAAC;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAG,eAClE;MAAK,GAAG,EAAEC,IAAK;MAAC,GAAG,EAAC,WAAW;MAAC,SAAS,EAAC;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAC3D;AAEb,CAAC;AAAC,GA7CIC,WAAW;EAAA,QAEiBJ,eAAe;AAAA;AAAA,KAF3CI,WAAW;AA+CjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}